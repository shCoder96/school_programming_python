# A. Пончики
# Дано количество пончиков (целое число);
# Нужно вернуть строку следующего вида:
# 'Количество пончиков: <count>', где <count> это количество,
# переданное в функцию как параметр.
# Однако, если количество 10 и более - нужно использовать слово
# 'много', вместо текущего количества.
# Таким образом, donuts(5) вернет 'Количество пончиков: 5'
# а donuts(23) - 'Количество пончиков: много'
def donuts(count):
    res = 'Количество пончиков: %s' % count if count <= 10 else 'Количество пончиков: много' 
    print(res)
    return res

# B. Оба конца
# Дана строка s. 
# Верните строку, состоящую из первых 2
# и последних 2 символов исходной строки.
# Таким образом, из строки 'spring' получится 'spng'. 
# Однако, если длина строки меньше, чем 2 -
# верните просто пустую строчку.
def both_ends(s):
    res = s[:2] + s[-2:] if len(s) > 2 else ''
    print(res)
    return res


# C. Кроме первого
# Дана строка s.
# Верните строку, в которой все вхождения ее первого символа
# заменены на '*', за исключением самого этого первого символа.
# Т.е., из 'babble' получится 'ba**le'.
# Предполагается, что длина строки 1 и более.
# Подсказка: s.replace(stra, strb) вернет версию строки, 
# в которой все вхождения stra будут заменены на strb.
def fix_start(s):
    get = s[0]
    res = get + s[1:].replace(get, '*')
    print(res)
    return res

# D. Перемешивание
# Даны строки a и b.
# Верните одну строку, в которой a и b отделены пробелом '<a> <b>', 
# и поменяйте местами первые 2 символа каждой строки.
# Т.е.:
#   'mix', 'pod' -> 'pox mid'
#   'dog', 'dinner' -> 'dig donner'
# Предполагается, что строки a и b имеют длину 2 и более символов.
def mix_up(a, b):    
    res = a.replace(a[:2], b[:2]) + ' ' + b.replace(b[:2], a[:2])
    print(res)
    return res
mix_up('mix', 'pod')


# E. Хорош
# Дана строка.
# Найдите первое вхождение подстрок 'не' и 'плох'.
# Если 'плох' идет после 'не' - замените всю подстроку
# 'не'...'плох' на 'хорош'.
# Верните получившуюся строку
# Т.о., 'Этот ужин не так уж плох!' вернет:
# Этот ужин хорош!
def not_bad(s):
    if 'плох' not in s:
        return s
    elif s.find('не') < s.find('плох'):
        res = s[:s.find('не')] + 'хорош'
        print(res)
        return res
    else: 
    	return s


def front_back(a, b):
    if len(a) % 2 == 0:
        first_a = a[:len(a) / 2]
        second_a = a[len(a) / 2:]    
    else:
        first_a = a[:len(a) // 2 + 1]
        second_a = a[len(a) // 2 + 1:]
    if len(b) % 2 == 0:
        first_b = b[:len(b) // 2]
        second_b = b[len(b) // 2:]
    else:
        first_b = b[:len(b) // 2 + 1]
        second_b = b[len(b) // 2 + 1:]
    return first_a + first_b + second_a + second_b
front_back('abcde', 'adf')